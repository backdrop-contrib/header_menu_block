<?php

/**
 * Implements hook_config_info().
 */
function header_menu_block_config_info() {
  $prefixes['header_menu_block.settings'] = array(
    'label' => t('Header Menu Block settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}


/**
 * Implements hook_block_info().
 */
function header_menu_block_block_info() {
  $blocks['header_menu_block'] = array(
    'info' => t('Header menu block'),
    'description' => t('Contains elements typical of a site header including the site logo, name, slogan, and optionally a navigational menu.'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function header_menu_block_block_view($delta = '', $settings = array(), $contexts = array()) {
  $block = array();
  switch ($delta) {
    case 'header_menu_block':
      $block['subject'] = NULL;
      $block['content'] = header_menu_block_view($settings);
      return $block;

  }
}

/**
 * Implements hook_block_configure().
 */
function header_menu_block_block_configure($delta = '', $settings = array()) {
  $form = array();
  if ($delta === 'header_menu_block') {
    $settings += array(
      'logo' => TRUE,
      'site_name' => TRUE,
      'nav_menu' => 'main-menu',
      'user_menu' => 'user-menu',
      'search_form' => FALSE,
      'language_menu' => FALSE,
    );

    $form['help'] = array(
      '#type' => 'help',
      '#markup' => t('Show or hide various components of your site header. To change the values of these components, visit the !site_info page.',
        array('!site_info' => l(t('Site information'), 'admin/config/system/site-information'))),
    );
    $form['logo'] = array(
      '#type' => 'checkbox',
      '#title' => t('Logo'),
      '#default_value' => $settings['logo'],
    );
    $form['site_name'] = array(
      '#type' => 'checkbox',
      '#title' => t('Site name'),
      '#default_value' => $settings['site_name'],
    );
    $form['search_form'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show search form'),
      '#default_value' => $settings['search_form'],
    );
    if (language_multilingual()) {
      $form['language_menu'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show language links'),
        '#default_value' => $settings['language_menu'],
      );
    }
    else {
      $form['language_menu'] = array(
        '#type' => 'value',
        '#value' => FALSE,
      );
    }
    $form['user_menu'] = array(
      '#title' => t('User menu'),
      '#type' => 'select',
      '#options' => menu_get_menus(),
      '#empty_option' => '- ' . t('None') . ' -',
      '#default_value' => $settings['user_menu'],
    );
    $form['nav_menu'] = array(
      '#title' => t('Navigation menu'),
      '#type' => 'select',
      '#options' => menu_get_menus(),
      '#empty_option' => '- ' . t('None') . ' -',
      '#default_value' => $settings['nav_menu'],
    );
    $form['nav_menu_settings'] = array(
      '#title' => t('Settings for navigation menu'),
      '#type' => 'fieldset',
      '#states' => array(
        'invisible' => array(
          'select[name="block_settings[nav_menu]"]' => array('value' => ''),
        ),
      ),
    );
    module_load_include('inc', 'system', 'system.menu');
    if (isset($settings['nav_menu_settings']['menu_options'])) {
      $configs = $settings['nav_menu_settings']['menu_options'];
    }
    else {
      $configs = system_menu_block_defaults('main-menu');
    }
    $form['nav_menu_settings']['menu_options'] = _system_block_configure($delta, $configs);
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function header_menu_block_block_save($delta, &$edit = array()) {
  $edit['nav_menu_settings']['menu_options']['menu_name'] = $edit['nav_menu'];
  if (empty($edit['logo']) && empty($edit['site_name']) && empty($edit['nav_menu']) && empty($edit['user_menu'])) {
    form_set_error('', t('You must select at least one component'));
  }
}

/**
 * Implements hook_block_view().
 */
function header_menu_block_view($settings) {
  return theme('header_menu_block', array('settings' => $settings));
}

/**
 * Implements hook_preprocess_hook().
 */
function header_menu_block_preprocess_header_menu_block(&$variables) {
  $settings = $variables['settings'];
  $variables += array(
    'logo' => FALSE,
    'site_name' => FALSE,
    'nav_menu' => FALSE,
    'user_menu' => FALSE,
    'search_form' => FALSE,
    'language_menu' => FALSE,
  );

  $site_config = config('system.core');
  $variables['logo'] = $settings['logo'] ? backdrop_get_logo() : NULL;
  $variables['logo_attributes'] = $settings['logo'] ? array_diff_key(backdrop_get_logo_info(), array('path' => '')) : array();
  $variables['site_name'] = $settings['site_name'] ? check_plain($site_config->get('site_name')) : '';
  $variables['front_page'] = url();

  // Navigation menu.
  if ($settings['nav_menu']) {
    module_load_include('inc', 'system', 'system.menu');
    $configs = $settings['nav_menu_settings']['menu_options'];
    $configs += system_menu_block_defaults($settings['nav_menu']);
    $data = system_menu_block_build($configs);

    $variables['nav_menu'] = backdrop_render($data['content']);
  }

  // User menu.
  if ($settings['user_menu']) {
    module_load_include('inc', 'system', 'system.menu');
    $configs = system_menu_block_defaults('user-menu');
    $data = system_menu_block_build($configs);

    // Add the sm class so styles don't mess with flexbox.
    $data['content']['#wrapper_attributes']['class'][] = 'sm';
    $variables['user_menu'] = backdrop_render($data['content']);
  }

  // Search block.
  if ($settings['search_form']) {
    backdrop_add_js(backdrop_get_path('module', 'header_menu_block') . '/js/header_menu_block.js');
    $search_form = backdrop_get_form('search_block_form');
    $search_form['actions']['submit']['#access'] = FALSE;
    $variables['search_form'] = backdrop_render($search_form);
  }

  // Language menu.
  if (language_multilingual() && $settings['language_menu']) {
    $path = backdrop_is_front_page() ? '<front>' : $_GET['q'];
    $links = language_negotiation_get_switch_links('language', $path);

    if (isset($links->links)) {
      $language_menu = header_menu_block_build_language_menu($links->links);
      $variables['language_menu'] = backdrop_render($language_menu);
    }
  }

}

/**
 * Create a menu out of language links.
 */
function header_menu_block_build_language_menu($links) {
  global $language ;
  $language_default = $language;

  // Create menu links for each language that isn't the currently active.
  $child_menus = array(
    '#sorted' => TRUE,
    '#depth' => 1,
    '#theme_wrappers' => array('menu_tree__main_menu'),
  );

  foreach ($links as $link) {
    if ($link['language']->langcode != $language_default->langcode) {
      $child_menus[$link['language']->langcode] = array(
        '#theme' => 'menu_link__main_menu',
        '#attributes' => array('class' => array('leaf')),
        '#title' => $link['language']->name,
        '#href' => $link['href'],
        '#localized_options' =>  array('language' => $link['language']),
        '#below' =>  array(),
        '#original_link' => array(),
      );
    }
  }

  // Now create a menu link for the currently active language and add all other
  // languages as child menu items.
  $menu_links = array(
    '#theme' => 'menu_link__main_menu',
    '#attributes' => array('class' => array('expanded', 'has-children')),
    '#title' => $language_default->name,
    '#href' => $link['href'],
    '#localized_options' =>  array('language' => $language_default),
    '#below' =>  $child_menus,
    '#original_link' => array(),
  );

  // Finally create a menu out of those links.
  $language_menu = array(
    'lang' => $menu_links,
    '#sorted' => TRUE,
    '#depth' => 0,
    '#theme_wrappers' => array('menu_tree__main_menu'),
    '#wrapper_attributes' => array(
      'class' => array('leaf', 'menu-dropdown'),
      'data-menu-style' => 'dropdown',
      'data-clickdown' => FALSE,
    ),
    '#attached' => array(
      'library' => array(
        array('system', 'backdrop.menus'),
        array('system', 'smartmenus'),
      ),
    ),
  );

  return $language_menu;
}

/**
 * Implements hook_preprocess_hook().
 */
function header_menu_block_preprocess_layout(&$variables) {
  $variables['classes'][] = 'header-menu-block-enabled';
}

/**
 * Implements hook_theme().
 */
function header_menu_block_theme() {
  return array(
    'header_menu_block' => array(
      'variables' => array('settings' => array()),
      'template' => 'templates/header-menu-block', 
    ),
  );
}
